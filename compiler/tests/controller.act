import netconf

actor Controller(env, address, port):
    
    var nc = None
    var state = 'IDLE'                  # EMPTY | IDLE(nc) | GET(nc)
    var setting = 0
    
    def _restart(what):
        if nc != None:
            nc.abort()
            nc = None
        print('Controller', str(address) + ':' + str(port), what)
        netconf.connect(env, address, port, async(_established), async(_error))
        state = 'IDLE'

    def _established(sess):
        if sess != None:
            nc = sess
            after 10: _tick()
        else:
            _restart('connection failure')
    
    def _tick():
        if state == 'IDLE':
            state = 'GET'
            after 10: _tick()
            nc.get('/oper/thevalue', async(_reply))
        else:
            _restart('timeout')
    
    def _reply(newval):
        if state == 'GET':
            setting = compute(setting, newval)
            nc.edit_config('/config/settings/thesetting', setting)
            state = 'IDLE'
        else:
            _restart('stray reply')
            
    def _error(what):
        _restart('NETCONF error: ' + what)

    _restart('initial')


def compute(setting, newval):
    return (setting + newval) // 2

