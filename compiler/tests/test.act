x0 : (x: int, y: int)                                    # struct
x1 : (x: int, y: A, **B)                                 # open struct; two fileds of the same type
x2 : (int  | float)                                      # union
x3 : ('str1' | 'str2' | int)                             # union with string literals
x4 : (int,bool)                                          # tuple
x5 : ?B12                                                # option type; type var
x6 : Set[int]                                            # Class with type argument
x7 : [A(Hashable), B, S(Mapping[A,B])] => (S)->dict[A,B] # Qualified/constrained type
x8 : ((int) -> int,(b : bool),(int,int))                 # more complicated tuple
x9 : act X (int,*A,b : bool,**B) -> set[int]             # function with effects and all kinds of parameters

x10: act(int, *A, b: bool) -> Msg[int]
x11: X(f: X(A)->B, a: [A]) -> [B]
#x12: st[Y](int, list[Y,str]) -> str
#x13: st(int, dict[int]) -> None
#x14: mut[Y](int, list[Y,str]) -> str
#x15: mut(int, dict[int]) -> None
#x16: !Y(int, list[Y,str]) -> str
#x17: !(int, dict[int]) -> None

a0 : (float,float) -> (float | 'division by zero')       # function without effects; union result
a1 : (str,*P,c : bool) -> None                           # function with * separation of pos and kwd parameters
a2 : (int) -> (int) -> int                               # higher order function
a3 : {int}                                               # set of ints (protocol)
a4 : [(float,bool)]                                      # list of tuples (protocol)
a5 : {{[int]}}                                           # more complicated set (protcol)
a6 : {[int]:(int) -> bool}                               # a dict (protocol)
a7 : (set[int],list[float],dict[{int},bool])             # tuple of mutable data structures

y1 : (x: float, y: A, **B)                               # open struct
y2 : (**)                                                # open struct
y3 : (**A)                                               # open struct
y4 : (int, bool, *A)                                     # open tuple
y5 : (int, bool, *)                                      # open tuple
y6 : (*)                                                 # open tuple
y7 : (*A)                                                # open tuple
y8 : ()                                                  # empty tuple (should count as empty struct as well?)

f0 : () -> int
f1 : (int) -> bool
f2 : (int,) -> int
f3 : (int,bool) -> int
f4 : (int,bool,) -> int
f5 : (int,bool,*) -> int
f6 : (int,bool,*,) -> int
f7 : (int,bool,*A) -> int
f8 : (int,bool,*A,) -> int
f9 : (*) -> int
f10 : (*,) -> int
f11 : (*A) -> int
f12 : (*A,) -> int
f12a : (**A) -> bool
f12b : (**A,) -> bool

f13 : (x : float) -> int
f14 : (x : float,) -> int
f15 : (x : float, y : str) -> int
f16 : (x : float, y : str, **) -> int
f17 : (x : float, y : str, **A) -> int
f18 : (x : float, y : str,**,) -> int
f19 : (x : float, y : str,**A,) -> int

f20 : (int, x : float) -> int
f21 : (int, *A,x:float, **B,) -> int
f22 : (,) -> int                                        # Should this really be allowed??

f23 : [A] => (Self, y:Self) -> [A]                      # functiona with Self and [A] disambiguation!

z0 : (int,bool,*A,)
z1 : (x : float)
z2 : (x : (y : float,z : bool),**A,)
z3 : [A]                                                # sequence that also could be the start of a qualified type


def elem [A(Eq), B(Boolean)] (x:A, xs:[A]) -> B:        # function with explicit quant/qualifiers
    pass

def f24():
    pass
    
def f25(a):
    pass
    
def f26(a,):
    pass
    
def f27(a,*b):
    a.0 = (7)
    a.*1 = (2,)
    return ()
    
def f28(a,*b,):
    apa = (1,2,x=3,y='hello')
    bepa = (1,2)
    (cepa) = 3
    (c,) = (4,)
    (d,e) = a
    
def f29(a,**b):
    pass
    
def f30(a,**b,):
    pass
    
def f31(a,*b,**c):
    pass
    
def f32(a,*b,**c,):
    pass
    
def f33(a,*b,c,**d):
    pass
    
def f34(a,*b,c,**d,):
    pass

def f35(*a):
    pass

def f35b(*a,):
    pass

def f36(*a,**b):
    pass

def f37(*a,**b,):
    pass

def f38(*a,b,**c):
    pass

def f39(*a,b,**c,):
    pass

def f40(**c):
    pass

def f40b(**c,):
    pass


class Apa:
    x : int
    
    def __init__(self):
        self.x = 1

    @staticmethod
    def f(x):
        pass

if True:
    while False:
        pass

protocol Bepa():
        
    @classattr
    x : int
    
    @staticmethod
    compare : (Self,Self) -> bool
    
    def compare(x:Self, y:Self) -> bool:
        if True:
            while False:
                pass
        return True
    


actor Test[T](v0:T):
    def m(x):
        pass


def f(z):
    pass

protocol MyProto[A,B(Eq)] (Eq):
    pass

extension __builtin__.int (Eq):
    pass

protocol MyIndexed[A,B]:                                 # just a protocol
    __getit__ : (A) -> B

g : ([A]=>(A)->A, int, str) -> (int,str)                 # a rank-2 scheme with positional arguments

h : (f:[A]=>(A)->A, x:int, y:dict[int,str]) -> str      # a rank-2 scheme with keyword arguments

ff : (**A) -> bool
