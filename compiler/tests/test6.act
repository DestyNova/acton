class Env (struct):
    open        : action(str, int, action(?Connection)->None) -> None

class Connection:
    deliver     : action(data: str) -> None
    close       : action() -> None
    receive_on  : action(input: action(str)->None, error: action(str)->None) -> None

actor _EnvActor ():
    def do_open(str, int, on_success):
        pass

class _Env (Env):
    def __init__(self, actual):
        self.actual = actual
    def open(self, address: str, port: int, on_success):
        self.actual.do_open(address, port, on_success)
