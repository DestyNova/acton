class Env (object):
    open        : action(str, int, action(?Connection)->None) -> None

class Connection:
    deliver     : action(data: str) -> None
    close       : action() -> None
    receive_on  : action(input: action(str)->None, error: action(str)->None) -> None

# Hidden:

class _Env (Env):
    @property
    actual      : _EnvActor
    def __init__(self, actual):
        self.actual = actual
    def open(self, address, port, on_success):
        self.actual.open(address, port, on_success)
    # or, using a (tentative) notational shorthand:
    # open = self.actual.open

actor _EnvActor ():
    def open(str, int, on_success):
        pass

 
# struct Env;
# typedef struct Env *Env;
# struct Env$__class__;
# typedef struct Env$__class__ *Env$__class__;
# 
# struct Connection;
# typedef struct Connection *Connection;
# struct Connection$__class__;
# typedef struct Connection$__class__ *Connection$__class__;
# 
# struct Env {
#     Env$__class__ __class__;
#     $WORD __impl__;
# };
# struct Connection {
#     Connection$__class__ __class__;
#     $WORD __impl__;
# };
# struct Env$__class__ {
#     char *$GCINFO;
#     $Msg (*open)(Env$__class__, $WORD, $str, $int, $Clos);
# };
# struct Connection$__class__ {
#     char *$GCINFO;
#     $Msg (*deliver)(Connection$__class__, $WORD, $str);
#     $Msg (*close)(Connection$__class__, $WORD);
#     $Msg (*receive_on)(Connection$__class__, $WORD, $Clos, $Clos);
# };
