protocol Env:
    open        : async(address: str, port: int, on_success: async(?Connection)->None) -> None

protocol Connection:
    deliver     : async(data: str) -> None
    close       : async() -> None
    receive_on  : async(input: async(str)->None, error: async(str)->None) -> None

############

@protocol
class Env:
    open        : (address: str, port: int, on_success: (?Connection)->async[None]) -> async[None]

@protocol
class Connection:
    deliver     : (data: str) -> async[None]
    close       : () -> async[None]
    receive_on  : (input: (str)->async[None], error: (str)->async[None]) -> async[None]

################## types:
# 
# class Env[S] ():
#     @classmethod
#     open        : async(S, str, int, async(?Connection) -> None) -> None
# 
# class Connection[S] ():
#     @classmethod
#     deliver     : async(S, str) -> None
#     @classmethod
#     close       : async(S) -> None
#     @classmethod
#     receive_on  : async(S, input:async(str)->None, error:async(str)->None) -> None

################## norm:
# 
# class Env[S] ():
#     @classmethod
#     open        : async(S, ___.str, ___.int, async(?Connection) -> None) -> None
# 
# class Connection[S] ():
#     @classmethod
#     deliver     : async(S, ___.str) -> None
#     @classmethod
#     close       : async(S) -> None
#     @classmethod
#     receive_on  : async(S, async(___.str)->None, async(___.str)->None) -> None

################## deact:
# 
# class Env[S] ():
#     @classmethod
#     open        : (S, ___.str, ___.int, (?Connection) -> ___.Msg[None]) -> ___.Msg[None]
# 
# class Connection[S] ():
#     @classmethod
#     deliver     : (S, ___.str) -> ___.Msg[None]
#     @classmethod
#     close       : (S) -> ___.Msg[None]
#     @classmethod
#     receive_on  : (S, (___.str)->___.Msg[None], (___.str)->___.Msg[None]) -> ___.Msg[None]

################## cps:
# 
# class Env[S] ():
#     @classmethod
#     open        : (S, ___.str, ___.int, (?Connection) -> ___.Msg[None]) -> ___.Msg[None]
# 
# class Connection[S] ():
#     @classmethod
#     deliver     : (S, ___.str) -> ___.Msg[None]
#     @classmethod
#     close       : (S) -> ___.Msg[None]
#     @classmethod
#     receive_on  : (S, (___.str)->___.Msg[None], (___.str)->___.Msg[None]) -> ___.Msg[None]

################## close:
# 
# class Env[S] ():
#     @classmethod
#     open        : (S, ___.str, ___.int, ___.Clos[(?Connection),___.Msg[None]]) -> ___.Msg[None]
# 
# class Connection[S] ():
#     @classmethod
#     deliver     : (S, ___.str) -> ___.Msg[None]
#     @classmethod
#     close       : (S) -> ___.Msg[None]
#     @classmethod
#     receive_on  : (S, ___.Clos[(___.str),___.Msg[None]], ___.Clos[(___.str),___.Msg[None]]) -> ___.Msg[None]

################## llift:
# 
# class Env[S] ():
#     @classmethod
#     open        : (S, ___.str, ___.int, ___.Clos[(?Connection),___.Msg[None]]) -> ___.Msg[None]
# 
# class Connection[S] ():
#     @classmethod
#     deliver     : (S, ___.str) -> ___.Msg[None]
#     @classmethod
#     close       : (S) -> ___.Msg[None]
#     @classmethod
#     receive_on  : (S, ___.Clos[(___.str),___.Msg[None]], ___.Clos[(___.str),___.Msg[None]]) -> ___.Msg[None]

################## cgen:
# 
# struct Env;
# typedef struct Env *Env;
# struct Env$__class__;
# typedef struct Env$__class__ *Env$__class__;
# 
# struct Connection;
# typedef struct Connection *Connection;
# struct Connection$__class__;
# typedef struct Connection$__class__ *Connection$__class__;
# 
# struct Env {
#     Env$__class__ __class__;
#     $WORD __impl__;
# };
# struct Connection {
#     Connection$__class__ __class__;
#     $WORD __impl__;
# };
# struct Env$__class__ {
#     char *$GCINFO;
#     $Msg (*open)(Env$__class__, $WORD, $str, $int, $Clos);
# };
# struct Connection$__class__ {
#     char *$GCINFO;
#     $Msg (*deliver)(Connection$__class__, $WORD, $str);
#     $Msg (*close)(Connection$__class__, $WORD);
#     $Msg (*receive_on)(Connection$__class__, $WORD, $Clos, $Clos);
# };
