class Env (object):
    @property
    stdin       : RFile
    @property
    stdout      : WFile
    @property
    argv        : list[str]
    exit        : action(int) -> None
    openR       : action(str) -> ?RFile
    openW       : action(str) -> ?WFile
    connect     : action(str, int, action(Connection)->None) -> None
    listen      : action(int, action(Connection)->None) -> None

class Closable:
    close       : action() -> None

class Connection(Closable):
    remoteHost  : str
    write       : action(str) -> None
    on_receipt  : action(input: action(str)->None, error: action(str)->None) -> None 

class RFile(Closable):
    on_input    : action(action(str)->None) -> None  

class WFile(Closable):
    write       : action(str) -> None
    
# Hidden:

actor _EnvActor ():
    def do_connect(address, port, on_success):
        pass
    def do_listen(port, on_success):
        pass
    def do_exit(status):
        pass
    def do_openR(filename):
        pass
    def do_openW(filename):
        pass

class _Env (Env):
    @property
    actual      : _EnvActor
    def __init__(self, stdin, stdout, argv, actual):
        self.stdin  = stdin
        self.stdout = stdout
        self.argv   = argv
        self.actual = actual
    def exit(self,status):
        self.actual.do_exit(status)
    def openR(self,filename):
        self.actual.do_openR(filename)
    def openW(self,filename):
        self.actual.do_openW(filename)
    def connect(self,address, port, on_success):
        self.actual.do_connect(address, port, on_success)
    def listen(self, port, on_success):
        self.actual.do_listen(port, on_success)
