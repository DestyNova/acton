# Definitions for interface between producing and consuming sides of
# a data flow with simple flow control.
#
# Producer delivers data by calling deliver_data() of Consumer. 

struct Consumer(Type, Error):
    # methods that may be called by associated producer
    
    deliver_data: (Type) -> bool  # Delivery of data to be consumed.
                                  # Always succeeds.
    		       	  	  # return True equivalent with encourage()
				  # return False equivalent with discourage()

    is_closed: () -> bool	  # True when any data delivered will be ignored

    producer_closed: () -> None   # Producer promises it will never call
                                  # deliver_data() again. Called exactly once.

    producer_error: (Error) -> None # Error condition reported by Producer
                                  
				  
struct Producer(Error):
    # methods that may be called by associated consumer
    
    discourage: () -> None        # consumer asks producer to slow down
    encourage: () -> None	  # consumer asks producer to deliver
    is_discouraged: () -> bool    # Am I delivering or am I slowed down?

    close: (opt(bool)) -> None    # close(True) - Consumer wants all data
                                  #    currently available, but
				  #    nothing more after that. Default.
				  # close(False) - Consumer wants no more data,
				  #    effective immediately

    is_closed: () -> bool	  # True iff producer will not deliver any more
                                  #    data.
				  
    consumer_error: (Error) -> None # Error condition reported by Consumer.


# Flow control:
#     Consumer buffers data delivered by deliver_data(data) as needed.
#     No blocking.
#     If Consumer deems it is busy or has buffered enough, it will
#     return False and/or call discourage() to inform Producer.
#     When at some later time the Consumer deems it is ready to accept more
#     data, it informs producer by calling encourage().
#     Calls to discourage() and deliver_data() returning False are idempotent.
#     Calls to encourage() and deliver_data() returning True are idempotent.
#
#     A Consumer that represents an outgoing OS socket, SHOULD call
#     discourage() or have deliver_data() return False whenever an OS send()
#     operation would have blocked. It SHOULD call encourage() when it has sent
#     all its buffered data and can send() without blocking.
#
#     A Producer that represents an incoming OS socket, SHOULD react to
#     discourage() or deliver_data() returning False by no longer receiving
#     data from the socket. It MUST NOT receive data from the socket only to
#     buffer it. The intended sequence of events is that discourage() stops
#     receiving from the socket, so that the receive buffer of the socket
#     fills up, which will cause the flow-control mechanisms of TCP (assuming
#     a TCP socket) to pace or stop the network peer sending to the socket.
#     A Producer SHOULD react to encourage() by again receiving from the socket
#     whenever there is data to receive, and delivering received data using the
#     deliver_data() method of its associated consumer. 
