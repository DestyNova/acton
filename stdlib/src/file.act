
class FileAuth():
    def __init__(self, auth: WorldAuth):
        pass

class ReadFileAuth():
    def __init__(self, auth: FileAuth):
        pass

class WriteFileAuth():
    def __init__(self, auth: FileAuth):
        pass


actor FS(auth: FileAuth):
    """File system operations """
    action def mkdir(filename: str):
        """Make a directory"""
        pass


actor ReadFile(auth: ReadFileAuth, filename: str):
    """Read a file
    """
    var _fd = -1

    proc def _open_file():
        """C magic"""
        NotImplemented
    _open_file()

    action def read() -> bytes:
        """Read content of file"""
        NotImplemented

    action def close() -> None:
        """Close file"""
        NotImplemented

    def _force_persistance():
        """Trick compiler into persisting the actor arguments we need.

        Compiler optimizes so that only variables that are used are persisted to
        the db. Since we use these variables from c, the compiler doesn't see
        them, thus we need to trick it. This method should never be called.
        """
        print(filename, _fd)


actor WriteFile(auth: WriteFileAuth, filename: str):
    """Write a file
    """
    var _fd = -1
    proc def _open_file():
        """C magic"""
        NotImplemented
    _open_file()

    action def write(data: bytes) -> None:
        """Write data to file"""
        NotImplemented

    action def close() -> None:
        """Close file"""
        NotImplemented

    def _force_persistance():
        """trick compiler into persisting the actor arguments we need.

        compiler optimizes so that only variables that are used are persisted to
        the db. since we use these variables from c, the compiler doesn't see
        them, thus we need to trick it. this method should never be called.
        """
        print(filename, _fd)


def _force_ext():
    """Force compilation using .ext.c

    Only top level functions are recognized as externally defined by actonc
    TODO: fix in actonc and remove this
    """
    NotImplemented
