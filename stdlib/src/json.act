# TODO: flip around Json actor with free encode/decode functions, i.e. we want
# the free encode/decode functions to actually do the work, which can be called
# as json.encode() or json.decode() and will run as procs, i.e. synchronous
# whereas if you want to run them async, you can use the Json actor. The Json
# actor should just wrap the free functions. Now it's the other way around (only
# way it works with compiler currently due to some bug), which means that every
# invocation of encode / decode will also allocate a new actor.

actor Json():
    proc def decode(data: str) -> dict[str, value]:
        NotImplemented

    proc def encode(data: dict[str, value]) -> str:
        NotImplemented


def decode(data: str) -> dict[str, value]:
    j = Json()
    return j.decode(data)

def encode(data: dict[str, value]) -> str:
    j = Json()
    return j.encode(data)


def _force_ext():
    """Force compilation using .ext.c

    Only top level functions are recognized as externally defined by actonc
    TODO: fix in actonc and remove this
    """
    NotImplemented
