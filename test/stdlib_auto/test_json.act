
import json

actor main(env):
    # TODO: issue report that we can't declare nested dict
    d1 = {"b": "1", "c": 2, "d": [1, 2]}
    l1 = [1, 2, 3]

    print("Testing: data -> JSON str -> data")
    test_data = [
        {"a": True, "b": False},
        {"a": "1", "b": 2},
        {"a": d1},
        {"a": [1, 2, 3]},
        {"a": [l1, l1]},
        {"a": [d1, d1]},
    ]
    for s in test_data:
        print(s)
        e = json.encode(s)
        print(e)
        d = json.decode(e)
        print(d)
#       This fails due to a compiler bug, see https://github.com/actonlang/acton/issues/841
#        if s is not None and d is not None and s != d:
#            print("MISMATCH")
#            await async env.exit(1)

        print()

    print("Testing: JSON str -> data -> JSON str")
    test_json = [
        """{"a":true,"b":false}""",
        """{"a":"1","b":2}""",
        """{"a":{"b":"1","c":2,"d":[1,2]}}""",
        """{"a":[1,2,3]}""",
        """{"a":[[1,2,3],[1,2,3]]}""",
        """{"a":[{"b":"1","c":2,"d":[1,2]},{"b":"1","c":2,"d":[1,2]}]}""",
    ]
    for s in test_json:
        print(s)
        d = json.decode(s)
        print(d)
        e = json.encode(d)
        if s is not None and e is not None and s != e:
            print("MISMATCH")
            await async env.exit(1)

        print()

    await async env.exit(0)
