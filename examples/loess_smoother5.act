import numpy
import math

# run as follows:

# script -q /dev/null examples/loess_smoother5 312 104 | gnuplot

# second command line argument: nr of weeks shown in window. 1/8 of this number are the new sample values intruced in each step.
# third command line argument: nr of weeks to be used in "loess window" for long term trend. 

def loess(x, y, xin, win):
    xd  = numpy.abs(xin[:,numpy.newaxis] - x)
    q   = xd/numpy.partition(xd,win)[:,win][:,numpy.newaxis]
    w   = numpy.clip(q, 0.0, 1.0)
    ws  = (1.0 - w ** 3.0) ** 3.0
    a00 = numpy.sum(ws,1)
    a01 = numpy.dot(ws, x)
    a11 = numpy.dot(ws, x*x)
    b0  = numpy.dot(ws, y)
    b1  = numpy.dot(ws, x*y)
    det = a00*a11-a01*a01
    return ((a11*b0 - a01*b1) + (-a01*b0 + a00*b1)*xin)/det

def decompose(observed, time, period, lo_window_frac):
    n : int
    n = len(observed)
    trend = loess(time, observed, time, int(lo_window_frac * float(n)))
    detrended = observed - trend
    short_trend =  loess(time, detrended, time, period//3)

    if n < period:
      period = n
    max_no_period_values = n // period + 1
 
    period_averages_list = replicate(period,0.0)
    for i in range(0,period,1):
        no_period_values = 0
        period_sum = 0.0
        for j in range(0,max_no_period_values,1):
            if j * period < n:
                y = short_trend[i+j * period]
                period_sum += numpy.scalar(y)
                no_period_values += 1
        period_averages_list[i] = (period_sum / float(no_period_values))
    mean = sum(period_averages_list,0.0)/float(period)
    period_averages_smoothed = numpy.array(period_averages_list)
    period_averages_smoothed -= numpy.array(replicate(period,mean))

    seasonal = numpy.tile(period_averages_smoothed, max_no_period_values)[0:n:1]

    residual = detrended - seasonal

    phase = n % period
    
    return (trend, seasonal, residual, period_averages_smoothed, phase) 
          
actor sampler(sample_size, report : action(numpy.ndarray[float],numpy.ndarray[float])->None):
    def sample(t0, n0):
        t1           = t0+float(sample_size)/52.0
        time         = numpy.linspace(t0,t1,sample_size)
        trend        = 2.0 + 0.1 * time
        periodic     = 0.5 * math.sin (6.2832 * time)
        noise        = numpy.unirandfloat(-0.5, 0.5, sample_size);
        observation  = trend + periodic + noise
        report(time, observation)
        after 4: sample(t1, n0+sample_size)

    sample(0.0, 0)


actor analyzer(sample_size, loess_win_size):
    var xsamples = []
    var ysamples = []

    nullsample   = numpy.zeros(sample_size)
    width        = float(sample_size)/52.0;

    def add_sample(x, y):
       xsamples.append(x)
       ysamples.append(y)
       del xsamples[0]
       del ysamples[0]
       time        = numpy.concatenate(xsamples)
       observation = numpy.concatenate(ysamples)
       trend, seasonal, resid, periodic, phase = decompose(observation, time, 52, 0.6)
       print("clear\n$data <<EOD")
       for i in range(0, 8*sample_size, 1):
           print(time[i], observation[i], trend[i], seasonal[i], resid[i])
       print("EOD")
       t0 = numpy.scalar(time[0])
       t1 = t0 + 8*width
       print("plot [",t0,":",t1,"][-1:5] \'$data\' using 1:2 with lines title \"raw data\", \\")
       print("\'$data\' using 1:3 with lines title \"loess smoothed\", \\")
       print("\'$data\' using 1:4 with lines title \"periodic\", \\")
       print("\'$data\' using 1:5 with lines title \"residual\"")

    for i in range(8,0,-1):
       xsamples.append(numpy.linspace(-float(i)*width, -float(i-1)*width, sample_size))
       ysamples.append(nullsample)
       

actor main(env):
  win_width = int(env.argv[1])
  loess_win_size =  int(env.argv[2])
  a = analyzer(win_width//8, loess_win_size)
  s = sampler(win_width//8, a.add_sample)

