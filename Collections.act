#class Iterator[A]:                           
#  __next__     : () -> A
 
protocol Eq:
  @staticmethod
  __eq__       : (Self,Self) -> bool
  @staticmethod
  __ne__       : (Self,Self) -> bool            # has default defn

protocol Ord (Eq):
  @staticmethod
  __lt__       : (Self,Self) -> bool
  @staticmethod
  __le__       : (Self,Self) -> bool            # has default defn
  @staticmethod
  __gt__       : (Self,Self) -> bool            # has default defn
  @staticmethod
  __ge__       : (Self,Self) -> bool            # has default defn

protocol Logical:
  @staticmethod
  __and__     : (Self,Self) -> Self
  @staticmethod
  __or__      : (Self,Self) -> Self
  @staticmethod
  __xor__     : (Self,Self) -> Self

protocol Plus:
  @staticmethod
  __add__      : (Self,Self) -> Self

protocol Minus:
  @staticmethod
  __sub__      : (Self,Self) -> Self

protocol Hashable (Eq):
  __hash__     : () -> int
  
protocol Iterable[A]:
  __iter__     : () -> Iterator[A]
  
protocol Collection[A] (Iterable[A]):
  @staticmethod
  __fromiter__ : (Iterable[A]) -> Self 
  __len__      : () -> int
  
protocol Indexed[A,B]:
  __getitem__  : (A) -> B
  __setitem__  : (A,B) -> None 
  __delitem__  : (A) -> None

protocol Sliceable[A] (Indexed[int,A]):
  __getslice__ : (Slice) -> Sequence[A]
  __setslice__ : (Slice,Iterable[A]) -> None
  __delslice__ : (Slice) -> None
  
protocol Sequence[A] (Sliceable[A], Collection[A], Plus):
  __reversed__ : () -> Iterator[A] 
  insert      : (int,A) -> None
  append      : (A) -> None   
  reverse     : () -> None       

protocol Container [A(Eq)] (Collection[A]):
  __contains__    : (A) -> bool  
  __containsnot__ : (A) -> bool  

protocol Mapping[A(Eq),B] (Container[A], Indexed[A,B]):
  get         : (A,B) -> B
  keys        : () -> Iterator[A]
  values      : () -> Iterator[B]
  items       : () -> Iterator[(A,B)]
  update      : (Mapping[A,B]) -> None  
  popitem     : () -> (A,B)
  setdefault  : (A,B) -> None

protocol Set[A (Eq)] (Container[A], Ord, Logical, Minus):
  isdisjoint  : (Set[A]) -> bool
  add         : (A) -> None  
  discard     : (A) -> None  
  pop         : () -> A 

extension list[A] (Sequence[A]): ...

extension dict[A(Hashable),B] (Mapping[A,B]): ...

extension set[A(Hashable)] (Set[A]): ...

extension Iterator[A](Iterable[A]): ...